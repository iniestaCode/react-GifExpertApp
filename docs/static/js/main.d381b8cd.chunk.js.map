{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","catis","type","value","onChange","target","getGifs","categories","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","category","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","Categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAUA,OACI,sBAAMC,SAPuB,SAACC,GAC9BA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,GACxBR,GAAe,SAAAS,GAAK,OAAGP,GAAH,mBAAiBO,QAIzC,SACG,uBACKC,KAAK,OACLC,MAAOT,EACPU,SAda,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCJlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,mGAEuEC,UAAUH,IAFjF,SAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAIIA,EAAUC,OAJd,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVlB,kBAaZM,GAbY,4CAAH,sDCDPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACI,sBAAKc,UAAU,mDAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,yCAAYA,SCDPO,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAOtB,ECVwB,SAACA,GACzB,MAA0BlC,mBAAS,CAC/BqB,KAAK,GACLc,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXJC,qBAAU,WAENzB,EAAQqB,GACCK,MAAK,SAAAC,GACEH,EAAS,CACLhB,KAAKmB,EACLL,SAAQ,SAI7B,CAACD,IACOE,EDPuBK,CAAaP,GAA/BP,EAAZ,EAAON,KAAYc,EAAnB,EAAmBA,QAErB,OACE,qCACA,oBAAIL,UAAU,wCAAd,SAAuDI,IACtDC,GAAS,mBAAGL,UAAU,wCAAb,wBACR,qBAAKA,UAAU,YAAf,SAEGH,EAAOJ,KAAI,SAACC,GAAD,OAEV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEMjBiB,EAxBM,WAEnB,MAAoC1C,mBAAS,CAAC,WAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAMA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEM4C,EAAWpB,KAAI,SAAAW,GAAQ,OACnB,cAAC,EAAD,CAAUA,SAAUA,GAAeA,Y,MCdnDU,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d381b8cd.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const CategoryAdd = ({setCategories}) => {\r\n    const [InputValue, setInputValue] = useState('')\r\n    const HandledInputChange=(e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const HandledSubmitAddCategory = (e)=>{\r\n        e.preventDefault();        \r\n        if(InputValue.trim().length>2){            \r\n            setCategories (catis=>[InputValue,...catis]);                    \r\n        }        \r\n    }   \r\n    return (\r\n        <form onSubmit={HandledSubmitAddCategory}>\r\n           <input \r\n                type=\"text\"\r\n                value={InputValue}\r\n                onChange={HandledInputChange}                        \r\n           />\r\n        </form>\r\n    )\r\n}\r\nCategoryAdd.propTypes = {    \r\n    setCategories : PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGifs = async (categories) => {\r\n    const url =\r\n  `https://api.giphy.com/v1/gifs/search?api_key=OvGLau6ftnBnFPq6PQaupEt9eXvvv8bX&limit=10&q=${encodeURI(categories)}`;\r\n    const respuesta = await fetch(url);\r\n    const { data } = await respuesta.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images.downsized_medium.url,\r\n      };\r\n    });    \r\n    return gifs;\r\n  };","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {  \r\n  return (          \r\n      <div className=\"card animate__animated animate__lightSpeedInLeft\">\r\n        <img src={url} alt={title}></img>\r\n        <p>Titulo: {title}</p>\r\n      </div>\r\n  );\r\n};\r\n","// import React, { useEffect, useState } from \"react\";\r\nimport React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"; \r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n//   const [Images, setImages] = useState([]);\r\n  //ejecuta la funcion solo cuando cumple con la lista de dependencias\r\n//   useEffect(() => {\r\n//     getGifs(categories).then(setImages);\r\n//   }, [categories]);\r\n  \r\n    const {data:images,loading} = useFetchGifs(category);\r\n \r\n  return (\r\n    <>    \r\n    <h3 className=\"animate__animated animate__fadeInDown\">{category}</h3>          \r\n    {loading&&<p className=\"animate__animated animate__fadeInLeft\">Loading...</p>}\r\n      <div className=\"card-grid\">\r\n      \r\n        {images.map((img) => (                        \r\n            \r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\nuseEffect(() => {\r\n    \r\n    getGifs(category)\r\n            .then(imgs=>{              \r\n                    setState({\r\n                        data:imgs,\r\n                        loading:false\r\n                    });                             \r\n            })\r\n    \r\n}, [category])\r\n    return state;\r\n}\r\n","import React,{useState} from \"react\";\r\nimport { CategoryAdd } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  \r\n  const [Categories, setCategories] = useState([\"Naruto\"])\r\n//   const handlerAdd=(e)=>{\r\n//         //setCounter ( (c)=>c-1);\r\n//         setCategories ([...Categories,'Pokemon']);\r\n//         //setCategories ((cates)=>[...cates,'Digimon'])\r\n//   }\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>    \r\n      <CategoryAdd setCategories={setCategories}/>  \r\n      <hr />      \r\n      <ol>\r\n          {\r\n            Categories.map(category => (\r\n                <GifGrid  category={category} key={category}/>\r\n            ))\r\n          }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}